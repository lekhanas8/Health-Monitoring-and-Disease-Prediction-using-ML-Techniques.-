{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "r7kdCAgEaOSr"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "%matplotlib inline\n",
        "sns.set_style(\"whitegrid\")\n",
        "plt.style.use(\"fivethirtyeight\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "id": "REvbZK_cau8q",
        "outputId": "c914f13a-836a-49e9-efc1-c786db5026d3"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-985a841a-5d19-4e13-af00-82948b20a9cf\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AREA</th>\n",
              "      <th>PERIMETER</th>\n",
              "      <th>MAJOR_AXIS</th>\n",
              "      <th>MINOR_AXIS</th>\n",
              "      <th>ECCENTRICITY</th>\n",
              "      <th>EQDIASQ</th>\n",
              "      <th>SOLIDITY</th>\n",
              "      <th>CONVEX_AREA</th>\n",
              "      <th>EXTENT</th>\n",
              "      <th>ASPECT_RATIO</th>\n",
              "      <th>...</th>\n",
              "      <th>Corr4</th>\n",
              "      <th>Diss_sim4</th>\n",
              "      <th>Homogen4</th>\n",
              "      <th>Contrast4</th>\n",
              "      <th>Energy5</th>\n",
              "      <th>Corr5</th>\n",
              "      <th>Diss_sim5</th>\n",
              "      <th>Homogen5</th>\n",
              "      <th>Contrast5</th>\n",
              "      <th>CLASS</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>13257</td>\n",
              "      <td>469.110</td>\n",
              "      <td>196.3762</td>\n",
              "      <td>87.1032</td>\n",
              "      <td>0.8962</td>\n",
              "      <td>129.9205</td>\n",
              "      <td>0.9741</td>\n",
              "      <td>13609</td>\n",
              "      <td>0.6645</td>\n",
              "      <td>2.2545</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.5855</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Ipsala</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>14572</td>\n",
              "      <td>489.286</td>\n",
              "      <td>202.2157</td>\n",
              "      <td>93.5429</td>\n",
              "      <td>0.8866</td>\n",
              "      <td>136.2118</td>\n",
              "      <td>0.9742</td>\n",
              "      <td>14958</td>\n",
              "      <td>0.5887</td>\n",
              "      <td>2.1617</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.5973</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Ipsala</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>9296</td>\n",
              "      <td>429.263</td>\n",
              "      <td>195.9518</td>\n",
              "      <td>60.8367</td>\n",
              "      <td>0.9506</td>\n",
              "      <td>108.7935</td>\n",
              "      <td>0.9777</td>\n",
              "      <td>9508</td>\n",
              "      <td>0.5839</td>\n",
              "      <td>3.2209</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.7051</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Jasmine</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>6763</td>\n",
              "      <td>407.519</td>\n",
              "      <td>190.2070</td>\n",
              "      <td>46.3751</td>\n",
              "      <td>0.9698</td>\n",
              "      <td>92.7950</td>\n",
              "      <td>0.9711</td>\n",
              "      <td>6964</td>\n",
              "      <td>0.3779</td>\n",
              "      <td>4.1015</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.6840</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Basmati</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7889</td>\n",
              "      <td>344.852</td>\n",
              "      <td>139.7678</td>\n",
              "      <td>72.1715</td>\n",
              "      <td>0.8564</td>\n",
              "      <td>100.2227</td>\n",
              "      <td>0.9800</td>\n",
              "      <td>8050</td>\n",
              "      <td>0.6356</td>\n",
              "      <td>1.9366</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.6696</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>Arborio</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã— 44 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-985a841a-5d19-4e13-af00-82948b20a9cf')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-985a841a-5d19-4e13-af00-82948b20a9cf button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-985a841a-5d19-4e13-af00-82948b20a9cf');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "    AREA  PERIMETER  MAJOR_AXIS  MINOR_AXIS  ECCENTRICITY   EQDIASQ  SOLIDITY  \\\n",
              "0  13257    469.110    196.3762     87.1032        0.8962  129.9205    0.9741   \n",
              "1  14572    489.286    202.2157     93.5429        0.8866  136.2118    0.9742   \n",
              "2   9296    429.263    195.9518     60.8367        0.9506  108.7935    0.9777   \n",
              "3   6763    407.519    190.2070     46.3751        0.9698   92.7950    0.9711   \n",
              "4   7889    344.852    139.7678     72.1715        0.8564  100.2227    0.9800   \n",
              "\n",
              "   CONVEX_AREA  EXTENT  ASPECT_RATIO  ...  Corr4  Diss_sim4  Homogen4  \\\n",
              "0        13609  0.6645        2.2545  ...      1          0         1   \n",
              "1        14958  0.5887        2.1617  ...      1          0         1   \n",
              "2         9508  0.5839        3.2209  ...      1          0         1   \n",
              "3         6964  0.3779        4.1015  ...      1          0         1   \n",
              "4         8050  0.6356        1.9366  ...      1          0         1   \n",
              "\n",
              "   Contrast4  Energy5  Corr5  Diss_sim5  Homogen5  Contrast5    CLASS  \n",
              "0          0   0.5855      1          0         1          0   Ipsala  \n",
              "1          0   0.5973      1          0         1          0   Ipsala  \n",
              "2          0   0.7051      1          0         1          0  Jasmine  \n",
              "3          0   0.6840      1          0         1          0  Basmati  \n",
              "4          0   0.6696      1          0         1          0  Arborio  \n",
              "\n",
              "[5 rows x 44 columns]"
            ]
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df = pd.read_csv(\"/content/RICE_MORPHOLOGICAL_SHAPE_TEXTURE FEATURES_MODIFIED_NEW1.csv\")\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UOR1HWKrbq_V",
        "outputId": "06819fbc-5ffd-41c0-d6fa-218b0d3c163a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 100000 entries, 0 to 99999\n",
            "Data columns (total 44 columns):\n",
            " #   Column             Non-Null Count   Dtype  \n",
            "---  ------             --------------   -----  \n",
            " 0   AREA               100000 non-null  int64  \n",
            " 1   PERIMETER          100000 non-null  float64\n",
            " 2   MAJOR_AXIS         100000 non-null  float64\n",
            " 3   MINOR_AXIS         100000 non-null  float64\n",
            " 4   ECCENTRICITY       100000 non-null  float64\n",
            " 5   EQDIASQ            100000 non-null  float64\n",
            " 6   SOLIDITY           100000 non-null  float64\n",
            " 7   CONVEX_AREA        100000 non-null  int64  \n",
            " 8   EXTENT             100000 non-null  float64\n",
            " 9   ASPECT_RATIO       100000 non-null  float64\n",
            " 10  TR                 100000 non-null  float64\n",
            " 11  COMPACTNESS        100000 non-null  float64\n",
            " 12  SHAPEFACTOR_1      100000 non-null  float64\n",
            " 13  SHAPEFACTOR_2      100000 non-null  float64\n",
            " 14  SHAPEFACTOR_3      100000 non-null  float64\n",
            " 15  SHAPEFACTOR_4      100000 non-null  float64\n",
            " 16  EDGE_AREA          100000 non-null  float64\n",
            " 17  Compactness Ratio  100000 non-null  float64\n",
            " 18  Energy             100000 non-null  float64\n",
            " 19  Corr               100000 non-null  float64\n",
            " 20  Diss_sim           100000 non-null  float64\n",
            " 21  Homogen            100000 non-null  float64\n",
            " 22  Contrast           100000 non-null  float64\n",
            " 23  Energy2            100000 non-null  float64\n",
            " 24  Corr2              100000 non-null  float64\n",
            " 25  Diss_sim2          100000 non-null  float64\n",
            " 26  Homogen2           100000 non-null  float64\n",
            " 27  Contrast2          100000 non-null  float64\n",
            " 28  Energy3            100000 non-null  float64\n",
            " 29  Corr3              100000 non-null  float64\n",
            " 30  Diss_sim3          100000 non-null  float64\n",
            " 31  Homogen3           100000 non-null  float64\n",
            " 32  Contrast3          100000 non-null  float64\n",
            " 33  Energy4            100000 non-null  float64\n",
            " 34  Corr4              100000 non-null  int64  \n",
            " 35  Diss_sim4          100000 non-null  int64  \n",
            " 36  Homogen4           100000 non-null  int64  \n",
            " 37  Contrast4          100000 non-null  int64  \n",
            " 38  Energy5            100000 non-null  float64\n",
            " 39  Corr5              100000 non-null  int64  \n",
            " 40  Diss_sim5          100000 non-null  int64  \n",
            " 41  Homogen5           100000 non-null  int64  \n",
            " 42  Contrast5          100000 non-null  int64  \n",
            " 43  CLASS              100000 non-null  object \n",
            "dtypes: float64(33), int64(10), object(1)\n",
            "memory usage: 33.6+ MB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZK3YAsHJbrEn",
        "outputId": "b61974ac-a43a-41ed-bbbd-6cb4babfae12"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "AREA                 0\n",
              "PERIMETER            0\n",
              "MAJOR_AXIS           0\n",
              "MINOR_AXIS           0\n",
              "ECCENTRICITY         0\n",
              "EQDIASQ              0\n",
              "SOLIDITY             0\n",
              "CONVEX_AREA          0\n",
              "EXTENT               0\n",
              "ASPECT_RATIO         0\n",
              "TR                   0\n",
              "COMPACTNESS          0\n",
              "SHAPEFACTOR_1        0\n",
              "SHAPEFACTOR_2        0\n",
              "SHAPEFACTOR_3        0\n",
              "SHAPEFACTOR_4        0\n",
              "EDGE_AREA            0\n",
              "Compactness Ratio    0\n",
              "Energy               0\n",
              "Corr                 0\n",
              "Diss_sim             0\n",
              "Homogen              0\n",
              "Contrast             0\n",
              "Energy2              0\n",
              "Corr2                0\n",
              "Diss_sim2            0\n",
              "Homogen2             0\n",
              "Contrast2            0\n",
              "Energy3              0\n",
              "Corr3                0\n",
              "Diss_sim3            0\n",
              "Homogen3             0\n",
              "Contrast3            0\n",
              "Energy4              0\n",
              "Corr4                0\n",
              "Diss_sim4            0\n",
              "Homogen4             0\n",
              "Contrast4            0\n",
              "Energy5              0\n",
              "Corr5                0\n",
              "Diss_sim5            0\n",
              "Homogen5             0\n",
              "Contrast5            0\n",
              "CLASS                0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 393
        },
        "id": "vXuC3TrMbrJR",
        "outputId": "189139a2-a40e-4838-a8ed-6ed5ad952ed9"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-988cc116-0a20-4289-bb6f-220f3cbd44c4\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AREA</th>\n",
              "      <th>PERIMETER</th>\n",
              "      <th>MAJOR_AXIS</th>\n",
              "      <th>MINOR_AXIS</th>\n",
              "      <th>ECCENTRICITY</th>\n",
              "      <th>EQDIASQ</th>\n",
              "      <th>SOLIDITY</th>\n",
              "      <th>CONVEX_AREA</th>\n",
              "      <th>EXTENT</th>\n",
              "      <th>ASPECT_RATIO</th>\n",
              "      <th>...</th>\n",
              "      <th>Energy4</th>\n",
              "      <th>Corr4</th>\n",
              "      <th>Diss_sim4</th>\n",
              "      <th>Homogen4</th>\n",
              "      <th>Contrast4</th>\n",
              "      <th>Energy5</th>\n",
              "      <th>Corr5</th>\n",
              "      <th>Diss_sim5</th>\n",
              "      <th>Homogen5</th>\n",
              "      <th>Contrast5</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>100000.00</td>\n",
              "      <td>100000.00</td>\n",
              "      <td>100000.00</td>\n",
              "      <td>100000.00</td>\n",
              "      <td>100000.00</td>\n",
              "      <td>100000.00</td>\n",
              "      <td>100000.00</td>\n",
              "      <td>100000.00</td>\n",
              "      <td>100000.00</td>\n",
              "      <td>100000.00</td>\n",
              "      <td>...</td>\n",
              "      <td>100000.00</td>\n",
              "      <td>100000.00</td>\n",
              "      <td>100000.00</td>\n",
              "      <td>100000.00</td>\n",
              "      <td>100000.00</td>\n",
              "      <td>100000.00</td>\n",
              "      <td>100000.00</td>\n",
              "      <td>100000.00</td>\n",
              "      <td>100000.00</td>\n",
              "      <td>100000.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>8379.82</td>\n",
              "      <td>378.18</td>\n",
              "      <td>161.81</td>\n",
              "      <td>66.83</td>\n",
              "      <td>0.89</td>\n",
              "      <td>101.74</td>\n",
              "      <td>0.98</td>\n",
              "      <td>8585.51</td>\n",
              "      <td>0.63</td>\n",
              "      <td>2.60</td>\n",
              "      <td>...</td>\n",
              "      <td>0.67</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.67</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>3117.94</td>\n",
              "      <td>70.59</td>\n",
              "      <td>36.46</td>\n",
              "      <td>16.68</td>\n",
              "      <td>0.07</td>\n",
              "      <td>17.87</td>\n",
              "      <td>0.01</td>\n",
              "      <td>3188.13</td>\n",
              "      <td>0.12</td>\n",
              "      <td>0.97</td>\n",
              "      <td>...</td>\n",
              "      <td>0.04</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.04</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>3929.00</td>\n",
              "      <td>261.04</td>\n",
              "      <td>96.97</td>\n",
              "      <td>34.67</td>\n",
              "      <td>0.63</td>\n",
              "      <td>70.73</td>\n",
              "      <td>0.88</td>\n",
              "      <td>4032.00</td>\n",
              "      <td>0.28</td>\n",
              "      <td>1.28</td>\n",
              "      <td>...</td>\n",
              "      <td>0.50</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.50</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>6262.00</td>\n",
              "      <td>316.42</td>\n",
              "      <td>132.64</td>\n",
              "      <td>49.66</td>\n",
              "      <td>0.85</td>\n",
              "      <td>89.29</td>\n",
              "      <td>0.97</td>\n",
              "      <td>6387.00</td>\n",
              "      <td>0.56</td>\n",
              "      <td>1.88</td>\n",
              "      <td>...</td>\n",
              "      <td>0.66</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.66</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>7346.00</td>\n",
              "      <td>351.34</td>\n",
              "      <td>149.33</td>\n",
              "      <td>69.19</td>\n",
              "      <td>0.89</td>\n",
              "      <td>96.71</td>\n",
              "      <td>0.98</td>\n",
              "      <td>7533.00</td>\n",
              "      <td>0.66</td>\n",
              "      <td>2.15</td>\n",
              "      <td>...</td>\n",
              "      <td>0.68</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.68</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8903.00</td>\n",
              "      <td>445.03</td>\n",
              "      <td>197.45</td>\n",
              "      <td>75.82</td>\n",
              "      <td>0.95</td>\n",
              "      <td>106.47</td>\n",
              "      <td>0.98</td>\n",
              "      <td>9157.00</td>\n",
              "      <td>0.73</td>\n",
              "      <td>3.23</td>\n",
              "      <td>...</td>\n",
              "      <td>0.70</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.70</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>21019.00</td>\n",
              "      <td>593.70</td>\n",
              "      <td>255.65</td>\n",
              "      <td>113.44</td>\n",
              "      <td>0.99</td>\n",
              "      <td>163.59</td>\n",
              "      <td>0.99</td>\n",
              "      <td>21633.00</td>\n",
              "      <td>0.90</td>\n",
              "      <td>6.18</td>\n",
              "      <td>...</td>\n",
              "      <td>0.73</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.73</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows Ã— 43 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-988cc116-0a20-4289-bb6f-220f3cbd44c4')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-988cc116-0a20-4289-bb6f-220f3cbd44c4 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-988cc116-0a20-4289-bb6f-220f3cbd44c4');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "           AREA  PERIMETER  MAJOR_AXIS  MINOR_AXIS  ECCENTRICITY   EQDIASQ  \\\n",
              "count 100000.00  100000.00   100000.00   100000.00     100000.00 100000.00   \n",
              "mean    8379.82     378.18      161.81       66.83          0.89    101.74   \n",
              "std     3117.94      70.59       36.46       16.68          0.07     17.87   \n",
              "min     3929.00     261.04       96.97       34.67          0.63     70.73   \n",
              "25%     6262.00     316.42      132.64       49.66          0.85     89.29   \n",
              "50%     7346.00     351.34      149.33       69.19          0.89     96.71   \n",
              "75%     8903.00     445.03      197.45       75.82          0.95    106.47   \n",
              "max    21019.00     593.70      255.65      113.44          0.99    163.59   \n",
              "\n",
              "       SOLIDITY  CONVEX_AREA    EXTENT  ASPECT_RATIO  ...   Energy4     Corr4  \\\n",
              "count 100000.00    100000.00 100000.00     100000.00  ... 100000.00 100000.00   \n",
              "mean       0.98      8585.51      0.63          2.60  ...      0.67      1.00   \n",
              "std        0.01      3188.13      0.12          0.97  ...      0.04      0.00   \n",
              "min        0.88      4032.00      0.28          1.28  ...      0.50      1.00   \n",
              "25%        0.97      6387.00      0.56          1.88  ...      0.66      1.00   \n",
              "50%        0.98      7533.00      0.66          2.15  ...      0.68      1.00   \n",
              "75%        0.98      9157.00      0.73          3.23  ...      0.70      1.00   \n",
              "max        0.99     21633.00      0.90          6.18  ...      0.73      1.00   \n",
              "\n",
              "       Diss_sim4  Homogen4  Contrast4   Energy5     Corr5  Diss_sim5  \\\n",
              "count  100000.00 100000.00  100000.00 100000.00 100000.00  100000.00   \n",
              "mean        0.00      1.00       0.00      0.67      1.00       0.00   \n",
              "std         0.00      0.00       0.00      0.04      0.00       0.00   \n",
              "min         0.00      1.00       0.00      0.50      1.00       0.00   \n",
              "25%         0.00      1.00       0.00      0.66      1.00       0.00   \n",
              "50%         0.00      1.00       0.00      0.68      1.00       0.00   \n",
              "75%         0.00      1.00       0.00      0.70      1.00       0.00   \n",
              "max         0.00      1.00       0.00      0.73      1.00       0.00   \n",
              "\n",
              "       Homogen5  Contrast5  \n",
              "count 100000.00  100000.00  \n",
              "mean       1.00       0.00  \n",
              "std        0.00       0.00  \n",
              "min        1.00       0.00  \n",
              "25%        1.00       0.00  \n",
              "50%        1.00       0.00  \n",
              "75%        1.00       0.00  \n",
              "max        1.00       0.00  \n",
              "\n",
              "[8 rows x 43 columns]"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pd.set_option('display.float_format', '{:.2f}'.format)\n",
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "s7pdr9ciavF3"
      },
      "outputs": [],
      "source": [
        "categorical_val = []\n",
        "continous_val = []\n",
        "for column in df.columns:\n",
        "#     print('==============================')\n",
        "#     print(f\"{column} : {df[column].unique()}\")\n",
        "    if len(df[column].unique()) <= 10:\n",
        "        categorical_val.append(column)\n",
        "    else:\n",
        "        continous_val.append(column)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3_os6mjQcRkc",
        "outputId": "b0009067-186e-48a1-e0d2-0da24c30b7a4"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['AREA', 'PERIMETER', 'MAJOR_AXIS', 'MINOR_AXIS', 'ECCENTRICITY',\n",
              "       'EQDIASQ', 'SOLIDITY', 'CONVEX_AREA', 'EXTENT', 'ASPECT_RATIO', 'TR',\n",
              "       'COMPACTNESS', 'SHAPEFACTOR_1', 'SHAPEFACTOR_2', 'SHAPEFACTOR_3',\n",
              "       'SHAPEFACTOR_4', 'EDGE_AREA', 'Compactness Ratio', 'Energy', 'Corr',\n",
              "       'Diss_sim', 'Homogen', 'Contrast', 'Energy2', 'Corr2', 'Diss_sim2',\n",
              "       'Homogen2', 'Contrast2', 'Energy3', 'Corr3', 'Diss_sim3', 'Homogen3',\n",
              "       'Contrast3', 'Energy4', 'Corr4', 'Diss_sim4', 'Homogen4', 'Contrast4',\n",
              "       'Energy5', 'Corr5', 'Diss_sim5', 'Homogen5', 'Contrast5', 'CLASS'],\n",
              "      dtype='object')"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lRjtZ9tGdJvE"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "\n",
        "X = df[feature_columns]\n",
        "y = df.CLASS\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bGobshQPcRwh"
      },
      "outputs": [],
      "source": [
        "from sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n",
        "\n",
        "\n",
        "def evaluate(model, X_train, X_test, y_train, y_test):\n",
        "    y_test_pred = model.predict(X_test)\n",
        "    y_train_pred = model.predict(X_train)\n",
        "\n",
        "    print(\"TRAINIG RESULTS: \\n===============================\")\n",
        "    clf_report = pd.DataFrame(classification_report(y_train, y_train_pred, output_dict=True))\n",
        "    print(f\"CONFUSION MATRIX:\\n{confusion_matrix(y_train, y_train_pred)}\")\n",
        "    print(f\"ACCURACY SCORE:\\n{accuracy_score(y_train, y_train_pred):.4f}\")\n",
        "    print(f\"CLASSIFICATION REPORT:\\n{clf_report}\")\n",
        "\n",
        "    print(\"TESTING RESULTS: \\n===============================\")\n",
        "    clf_report = pd.DataFrame(classification_report(y_test, y_test_pred, output_dict=True))\n",
        "    print(f\"CONFUSION MATRIX:\\n{confusion_matrix(y_test, y_test_pred)}\")\n",
        "    print(f\"ACCURACY SCORE:\\n{accuracy_score(y_test, y_test_pred):.4f}\")\n",
        "    print(f\"CLASSIFICATION REPORT:\\n{clf_report}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "nVJzVyKdeVLw",
        "outputId": "0d89e6e5-e0e9-4d45-92ed-1fc715dadab7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "TRAINIG RESULTS: \n",
            "===============================\n",
            "CONFUSION MATRIX:\n",
            "[[14932     0     0     0     0]\n",
            " [    0 14988     0     0     0]\n",
            " [    0     0 15047     0     0]\n",
            " [    0     0     0 14960     0]\n",
            " [    0     0     0     0 15073]]\n",
            "ACCURACY SCORE:\n",
            "1.0000\n",
            "CLASSIFICATION REPORT:\n",
            "           Arborio  Basmati   Ipsala  Jasmine  Karacadag  accuracy  macro avg  \\\n",
            "precision     1.00     1.00     1.00     1.00       1.00      1.00       1.00   \n",
            "recall        1.00     1.00     1.00     1.00       1.00      1.00       1.00   \n",
            "f1-score      1.00     1.00     1.00     1.00       1.00      1.00       1.00   \n",
            "support   14932.00 14988.00 15047.00 14960.00   15073.00      1.00   75000.00   \n",
            "\n",
            "           weighted avg  \n",
            "precision          1.00  \n",
            "recall             1.00  \n",
            "f1-score           1.00  \n",
            "support        75000.00  \n",
            "TESTING RESULTS: \n",
            "===============================\n",
            "CONFUSION MATRIX:\n",
            "[[5028    0    1    4   35]\n",
            " [   0 4989    0   23    0]\n",
            " [   0    0 4953    0    0]\n",
            " [   3   23    1 5013    0]\n",
            " [  32    0    0    0 4895]]\n",
            "ACCURACY SCORE:\n",
            "0.9951\n",
            "CLASSIFICATION REPORT:\n",
            "           Arborio  Basmati  Ipsala  Jasmine  Karacadag  accuracy  macro avg  \\\n",
            "precision     0.99     1.00    1.00     0.99       0.99      1.00       1.00   \n",
            "recall        0.99     1.00    1.00     0.99       0.99      1.00       1.00   \n",
            "f1-score      0.99     1.00    1.00     0.99       0.99      1.00       1.00   \n",
            "support    5068.00  5012.00 4953.00  5040.00    4927.00      1.00   25000.00   \n",
            "\n",
            "           weighted avg  \n",
            "precision          1.00  \n",
            "recall             1.00  \n",
            "f1-score           1.00  \n",
            "support        25000.00  \n"
          ]
        }
      ],
      "source": [
        "from sklearn.ensemble import BaggingClassifier\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "tree = DecisionTreeClassifier()\n",
        "bagging_clf = BaggingClassifier(base_estimator=tree, n_estimators=1500, random_state=42)\n",
        "bagging_clf.fit(X_train, y_train)\n",
        "\n",
        "evaluate(bagging_clf, X_train, X_test, y_train, y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lkTo28r1eVPY"
      },
      "outputs": [],
      "source": [
        "scores = {\n",
        "    'Bagging Classifier': {\n",
        "        'Train': accuracy_score(y_train, bagging_clf.predict(X_train)),\n",
        "        'Test': accuracy_score(y_test, bagging_clf.predict(X_test)),\n",
        "    },\n",
        "}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BgsNVvPPeVSm",
        "outputId": "a66a2c15-f1da-479b-9069-84720aaba91c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "TRAINIG RESULTS: \n",
            "===============================\n",
            "CONFUSION MATRIX:\n",
            "[[14932     0     0     0     0]\n",
            " [    0 14988     0     0     0]\n",
            " [    0     0 15047     0     0]\n",
            " [    0     0     0 14960     0]\n",
            " [    0     0     0     0 15073]]\n",
            "ACCURACY SCORE:\n",
            "1.0000\n",
            "CLASSIFICATION REPORT:\n",
            "           Arborio  Basmati   Ipsala  Jasmine  Karacadag  accuracy  macro avg  \\\n",
            "precision     1.00     1.00     1.00     1.00       1.00      1.00       1.00   \n",
            "recall        1.00     1.00     1.00     1.00       1.00      1.00       1.00   \n",
            "f1-score      1.00     1.00     1.00     1.00       1.00      1.00       1.00   \n",
            "support   14932.00 14988.00 15047.00 14960.00   15073.00      1.00   75000.00   \n",
            "\n",
            "           weighted avg  \n",
            "precision          1.00  \n",
            "recall             1.00  \n",
            "f1-score           1.00  \n",
            "support        75000.00  \n",
            "TESTING RESULTS: \n",
            "===============================\n",
            "CONFUSION MATRIX:\n",
            "[[5025    0    0    4   39]\n",
            " [   0 4990    0   22    0]\n",
            " [   0    0 4953    0    0]\n",
            " [   2   26    0 5012    0]\n",
            " [  40    0    0    0 4887]]\n",
            "ACCURACY SCORE:\n",
            "0.9947\n",
            "CLASSIFICATION REPORT:\n",
            "           Arborio  Basmati  Ipsala  Jasmine  Karacadag  accuracy  macro avg  \\\n",
            "precision     0.99     0.99    1.00     0.99       0.99      0.99       0.99   \n",
            "recall        0.99     1.00    1.00     0.99       0.99      0.99       0.99   \n",
            "f1-score      0.99     1.00    1.00     0.99       0.99      0.99       0.99   \n",
            "support    5068.00  5012.00 4953.00  5040.00    4927.00      0.99   25000.00   \n",
            "\n",
            "           weighted avg  \n",
            "precision          0.99  \n",
            "recall             0.99  \n",
            "f1-score           0.99  \n",
            "support        25000.00  \n"
          ]
        }
      ],
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "rf_clf = RandomForestClassifier(random_state=42, n_estimators=1000)\n",
        "rf_clf.fit(X_train, y_train)\n",
        "evaluate(rf_clf, X_train, X_test, y_train, y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "TrHzeMm5yJfz"
      },
      "outputs": [],
      "source": [
        "scores['Random Forest'] = {\n",
        "        'Train': accuracy_score(y_train, rf_clf.predict(X_train)),\n",
        "        'Test': accuracy_score(y_test, rf_clf.predict(X_test)),\n",
        "    }"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k0u8HioGyJoP",
        "outputId": "d9d0e57b-0575-47d3-e045-ab7b83c957e1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "TRAINIG RESULTS: \n",
            "===============================\n",
            "CONFUSION MATRIX:\n",
            "[[14932     0     0     0     0]\n",
            " [    0 14988     0     0     0]\n",
            " [    0     0 15047     0     0]\n",
            " [    0     0     0 14960     0]\n",
            " [    0     0     0     0 15073]]\n",
            "ACCURACY SCORE:\n",
            "1.0000\n",
            "CLASSIFICATION REPORT:\n",
            "           Arborio  Basmati   Ipsala  Jasmine  Karacadag  accuracy  macro avg  \\\n",
            "precision     1.00     1.00     1.00     1.00       1.00      1.00       1.00   \n",
            "recall        1.00     1.00     1.00     1.00       1.00      1.00       1.00   \n",
            "f1-score      1.00     1.00     1.00     1.00       1.00      1.00       1.00   \n",
            "support   14932.00 14988.00 15047.00 14960.00   15073.00      1.00   75000.00   \n",
            "\n",
            "           weighted avg  \n",
            "precision          1.00  \n",
            "recall             1.00  \n",
            "f1-score           1.00  \n",
            "support        75000.00  \n",
            "TESTING RESULTS: \n",
            "===============================\n",
            "CONFUSION MATRIX:\n",
            "[[5022    0    0    2   44]\n",
            " [   0 4993    0   19    0]\n",
            " [   0    0 4953    0    0]\n",
            " [   2   17    0 5021    0]\n",
            " [  31    0    0    0 4896]]\n",
            "ACCURACY SCORE:\n",
            "0.9954\n",
            "CLASSIFICATION REPORT:\n",
            "           Arborio  Basmati  Ipsala  Jasmine  Karacadag  accuracy  macro avg  \\\n",
            "precision     0.99     1.00    1.00     1.00       0.99      1.00       1.00   \n",
            "recall        0.99     1.00    1.00     1.00       0.99      1.00       1.00   \n",
            "f1-score      0.99     1.00    1.00     1.00       0.99      1.00       1.00   \n",
            "support    5068.00  5012.00 4953.00  5040.00    4927.00      1.00   25000.00   \n",
            "\n",
            "           weighted avg  \n",
            "precision          1.00  \n",
            "recall             1.00  \n",
            "f1-score           1.00  \n",
            "support        25000.00  \n"
          ]
        }
      ],
      "source": [
        "from sklearn.ensemble import ExtraTreesClassifier\n",
        "\n",
        "ex_tree_clf = ExtraTreesClassifier(n_estimators=1000, max_features=7, random_state=42)\n",
        "ex_tree_clf.fit(X_train, y_train)\n",
        "evaluate(ex_tree_clf, X_train, X_test, y_train, y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oEX9Onc3zArI"
      },
      "outputs": [],
      "source": [
        "scores['Extra Tree'] = {\n",
        "        'Train': accuracy_score(y_train, ex_tree_clf.predict(X_train)),\n",
        "        'Test': accuracy_score(y_test, ex_tree_clf.predict(X_test)),\n",
        "    }"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "74MNrByMzAx7",
        "outputId": "03f843f8-7cfc-4805-d3a5-731806c45f0e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "TRAINIG RESULTS: \n",
            "===============================\n",
            "CONFUSION MATRIX:\n",
            "[[13954     0     0   111   867]\n",
            " [    0 14201     0   787     0]\n",
            " [  331     0 14707     9     0]\n",
            " [   37   460    32 14430     1]\n",
            " [ 3824     0     0     0 11249]]\n",
            "ACCURACY SCORE:\n",
            "0.9139\n",
            "CLASSIFICATION REPORT:\n",
            "           Arborio  Basmati   Ipsala  Jasmine  Karacadag  accuracy  macro avg  \\\n",
            "precision     0.77     0.97     1.00     0.94       0.93      0.91       0.92   \n",
            "recall        0.93     0.95     0.98     0.96       0.75      0.91       0.91   \n",
            "f1-score      0.84     0.96     0.99     0.95       0.83      0.91       0.91   \n",
            "support   14932.00 14988.00 15047.00 14960.00   15073.00      0.91   75000.00   \n",
            "\n",
            "           weighted avg  \n",
            "precision          0.92  \n",
            "recall             0.91  \n",
            "f1-score           0.91  \n",
            "support        75000.00  \n",
            "TESTING RESULTS: \n",
            "===============================\n",
            "CONFUSION MATRIX:\n",
            "[[4740    0    0   37  291]\n",
            " [   0 4758    0  254    0]\n",
            " [ 108    0 4844    1    0]\n",
            " [  11  157   13 4859    0]\n",
            " [1223    0    0    0 3704]]\n",
            "ACCURACY SCORE:\n",
            "0.9162\n",
            "CLASSIFICATION REPORT:\n",
            "           Arborio  Basmati  Ipsala  Jasmine  Karacadag  accuracy  macro avg  \\\n",
            "precision     0.78     0.97    1.00     0.94       0.93      0.92       0.92   \n",
            "recall        0.94     0.95    0.98     0.96       0.75      0.92       0.92   \n",
            "f1-score      0.85     0.96    0.99     0.95       0.83      0.92       0.92   \n",
            "support    5068.00  5012.00 4953.00  5040.00    4927.00      0.92   25000.00   \n",
            "\n",
            "           weighted avg  \n",
            "precision          0.92  \n",
            "recall             0.92  \n",
            "f1-score           0.92  \n",
            "support        25000.00  \n"
          ]
        }
      ],
      "source": [
        "from sklearn.ensemble import AdaBoostClassifier\n",
        "\n",
        "ada_boost_clf = AdaBoostClassifier(n_estimators=30)\n",
        "ada_boost_clf.fit(X_train, y_train)\n",
        "evaluate(ada_boost_clf, X_train, X_test, y_train, y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1zn4EEh5zBAv"
      },
      "outputs": [],
      "source": [
        "scores['AdaBoost'] = {\n",
        "        'Train': accuracy_score(y_train, ada_boost_clf.predict(X_train)),\n",
        "        'Test': accuracy_score(y_test, ada_boost_clf.predict(X_test)),\n",
        "    }"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7fB9JAJ1zm_5",
        "outputId": "b23ab22e-38c3-4103-aeb2-d5d9e44260b4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "TRAINIG RESULTS: \n",
            "===============================\n",
            "CONFUSION MATRIX:\n",
            "[[14859     0     0    13    60]\n",
            " [    0 14948     0    40     0]\n",
            " [    0     0 15047     0     0]\n",
            " [    3    36     0 14921     0]\n",
            " [   63     0     0     0 15010]]\n",
            "ACCURACY SCORE:\n",
            "0.9971\n",
            "CLASSIFICATION REPORT:\n",
            "           Arborio  Basmati   Ipsala  Jasmine  Karacadag  accuracy  macro avg  \\\n",
            "precision     1.00     1.00     1.00     1.00       1.00      1.00       1.00   \n",
            "recall        1.00     1.00     1.00     1.00       1.00      1.00       1.00   \n",
            "f1-score      1.00     1.00     1.00     1.00       1.00      1.00       1.00   \n",
            "support   14932.00 14988.00 15047.00 14960.00   15073.00      1.00   75000.00   \n",
            "\n",
            "           weighted avg  \n",
            "precision          1.00  \n",
            "recall             1.00  \n",
            "f1-score           1.00  \n",
            "support        75000.00  \n",
            "TESTING RESULTS: \n",
            "===============================\n",
            "CONFUSION MATRIX:\n",
            "[[5020    2    0    6   40]\n",
            " [   0 4986    0   26    0]\n",
            " [   0    0 4953    0    0]\n",
            " [   5   18    1 5016    0]\n",
            " [  35    0    0    0 4892]]\n",
            "ACCURACY SCORE:\n",
            "0.9947\n",
            "CLASSIFICATION REPORT:\n",
            "           Arborio  Basmati  Ipsala  Jasmine  Karacadag  accuracy  macro avg  \\\n",
            "precision     0.99     1.00    1.00     0.99       0.99      0.99       0.99   \n",
            "recall        0.99     0.99    1.00     1.00       0.99      0.99       0.99   \n",
            "f1-score      0.99     1.00    1.00     0.99       0.99      0.99       0.99   \n",
            "support    5068.00  5012.00 4953.00  5040.00    4927.00      0.99   25000.00   \n",
            "\n",
            "           weighted avg  \n",
            "precision          0.99  \n",
            "recall             0.99  \n",
            "f1-score           0.99  \n",
            "support        25000.00  \n"
          ]
        }
      ],
      "source": [
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "\n",
        "grad_boost_clf = GradientBoostingClassifier(n_estimators=100, random_state=42)\n",
        "grad_boost_clf.fit(X_train, y_train)\n",
        "evaluate(grad_boost_clf, X_train, X_test, y_train, y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "S4VAFJYdznES"
      },
      "outputs": [],
      "source": [
        "scores['Gradient Boosting'] = {\n",
        "        'Train': accuracy_score(y_train, grad_boost_clf.predict(X_train)),\n",
        "        'Test': accuracy_score(y_test, grad_boost_clf.predict(X_test)),\n",
        "    }"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Eikm9A3J1j8v",
        "outputId": "6de70bd3-49f7-4f28-c420-d8d9942d7f98"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "TRAINIG RESULTS: \n",
            "===============================\n",
            "CONFUSION MATRIX:\n",
            "[[14743     0     0    26   163]\n",
            " [  185 14769     0    34     0]\n",
            " [   28     2 14998    19     0]\n",
            " [   23   147    51 14739     0]\n",
            " [   59     0     0     0 15014]]\n",
            "ACCURACY SCORE:\n",
            "0.9902\n",
            "CLASSIFICATION REPORT:\n",
            "           Arborio  Basmati   Ipsala  Jasmine  Karacadag  accuracy  macro avg  \\\n",
            "precision     0.98     0.99     1.00     0.99       0.99      0.99       0.99   \n",
            "recall        0.99     0.99     1.00     0.99       1.00      0.99       0.99   \n",
            "f1-score      0.98     0.99     1.00     0.99       0.99      0.99       0.99   \n",
            "support   14932.00 14988.00 15047.00 14960.00   15073.00      0.99   75000.00   \n",
            "\n",
            "           weighted avg  \n",
            "precision          0.99  \n",
            "recall             0.99  \n",
            "f1-score           0.99  \n",
            "support        75000.00  \n",
            "TESTING RESULTS: \n",
            "===============================\n",
            "CONFUSION MATRIX:\n",
            "[[4975    0    0   12   81]\n",
            " [  52 4925    0   35    0]\n",
            " [  10    1 4937    5    0]\n",
            " [  18   67   14 4941    0]\n",
            " [  45    0    0    1 4881]]\n",
            "ACCURACY SCORE:\n",
            "0.9864\n",
            "CLASSIFICATION REPORT:\n",
            "           Arborio  Basmati  Ipsala  Jasmine  Karacadag  accuracy  macro avg  \\\n",
            "precision     0.98     0.99    1.00     0.99       0.98      0.99       0.99   \n",
            "recall        0.98     0.98    1.00     0.98       0.99      0.99       0.99   \n",
            "f1-score      0.98     0.98    1.00     0.98       0.99      0.99       0.99   \n",
            "support    5068.00  5012.00 4953.00  5040.00    4927.00      0.99   25000.00   \n",
            "\n",
            "           weighted avg  \n",
            "precision          0.99  \n",
            "recall             0.99  \n",
            "f1-score           0.99  \n",
            "support        25000.00  \n"
          ]
        }
      ],
      "source": [
        "from sklearn.ensemble import VotingClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.svm import SVC\n",
        "\n",
        "estimators = []\n",
        "log_reg = LogisticRegression(solver='liblinear')\n",
        "estimators.append(('Logistic', log_reg))\n",
        "\n",
        "tree = DecisionTreeClassifier()\n",
        "estimators.append(('Tree', tree))\n",
        "\n",
        "svm_clf = SVC(gamma='scale')\n",
        "estimators.append(('SVM', svm_clf))\n",
        "\n",
        "voting = VotingClassifier(estimators=estimators)\n",
        "voting.fit(X_train, y_train)\n",
        "\n",
        "evaluate(voting, X_train, X_test, y_train, y_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0sFgN_c91kDM"
      },
      "outputs": [],
      "source": [
        "scores['Voting'] = {\n",
        "        'Train': accuracy_score(y_train, voting.predict(X_train)),\n",
        "        'Test': accuracy_score(y_test, voting.predict(X_test)),\n",
        "    }"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "id": "WPpCDp9lEb4E",
        "outputId": "8f094b3b-9273-4b1e-d990-c6f19e5149b3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fc0d266bdc0>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "scores_df = pd.DataFrame(scores)\n",
        "\n",
        "scores_df.plot(kind='bar', figsize=(15, 8))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BZ1wP5WmEcBp",
        "outputId": "3aa305ab-7386-4426-f37f-71f57349fc7c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(early_stopping_rounds=10, eval_metric=['merror', 'mlogloss'],\n",
              "              max_depth=5, missing=1, num_class=3, objective='multi:softprob',\n",
              "              seed=42)"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ],
      "source": [
        "## ---------- XGBoost model v3 ----------\n",
        "## third run of model with \"optimized\" hyperparameters and\n",
        "## attempting to treat unbalanced target classes\n",
        "# declaring and fitting xgb classifier\n",
        "import xgboost as xgb\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.metrics import confusion_matrix, plot_confusion_matrix, classification_report\n",
        "from sklearn.metrics import balanced_accuracy_score, accuracy_score, precision_score, recall_score, f1_score\n",
        "from sklearn.utils.class_weight import compute_sample_weight\n",
        "# balancing 'target' class weights\n",
        "sample_weights = compute_sample_weight(\n",
        "    class_weight='balanced',\n",
        "    y=y_train)\n",
        "xgb_clf = xgb.XGBClassifier(objective='multi:softmax',\n",
        "                            num_class=3,\n",
        "                            missing=1,\n",
        "                            gamma=0, # default gamma value\n",
        "                            learning_rate=0.1,\n",
        "                            max_depth=5, # re-optimized from v2\n",
        "                            reg_lambda=1, # default L2 value\n",
        "                            #subsample=0.8, # tried but not ideal\n",
        "                            #colsample_bytree=0.3, # tried but not ideal\n",
        "                            early_stopping_rounds=10,\n",
        "                            eval_metric=['merror','mlogloss'],\n",
        "                            seed=42)\n",
        "xgb_clf.fit(X_train,\n",
        "            y_train,\n",
        "            verbose=0, # set to 1 to see xgb training round intermediate results\n",
        "            #sample_weight=sample_weights, # class weights to combat unbalanced 'target'\n",
        "            eval_set=[(X_train, y_train), (X_test, y_test)])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2duSULKBKWTv"
      },
      "outputs": [],
      "source": [
        "# preparing evaluation metric plots\n",
        "results = xgb_clf.evals_result()\n",
        "epochs = len(results['validation_0']['mlogloss'])\n",
        "x_axis = range(0, epochs)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 361
        },
        "id": "bWjze5RuKZxi",
        "outputId": "13866b4d-01ee-4ebd-f541-7dfa1dcaf567"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 648x360 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# xgboost 'mlogloss' plot\n",
        "fig, ax = plt.subplots(figsize=(9,5))\n",
        "ax.plot(x_axis, results['validation_0']['mlogloss'], label='Train')\n",
        "ax.plot(x_axis, results['validation_1']['mlogloss'], label='Test')\n",
        "ax.legend()\n",
        "plt.ylabel('mlogloss')\n",
        "plt.title('GridSearchCV XGBoost mlogloss')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 361
        },
        "id": "eIq0kNt6KZ4T",
        "outputId": "71c22644-3652-4521-fdeb-b43b0dd8b3ab"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 648x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# xgboost 'merror' plot\n",
        "fig, ax = plt.subplots(figsize=(9,5))\n",
        "ax.plot(x_axis, results['validation_0']['merror'], label='Train')\n",
        "ax.plot(x_axis, results['validation_1']['merror'], label='Test')\n",
        "ax.legend()\n",
        "plt.ylabel('merror')\n",
        "plt.title('GridSearchCV XGBoost merror')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        },
        "id": "LBMQzMREKWd5",
        "outputId": "afec62ff-f796-4bc4-c776-9bc5c6f0ffcc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "------------------ Confusion Matrix -----------------\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Xgboost Testing Confusion_matrix with optimized hyper parameters')"
            ]
          },
          "metadata": {},
          "execution_count": 28
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "## ---------- Model Classification Report ----------\n",
        "## get predictions and create model quality report\n",
        "\n",
        "y_pred = xgb_clf.predict(X_test)\n",
        "\n",
        "print('\\n------------------ Confusion Matrix -----------------\\n')\n",
        "#print(confusion_matrix(y_test, y_pred))\n",
        "sns.heatmap(confusion_matrix(y_pred,y_test),annot=True,fmt=\".1f\",cmap='summer')\n",
        "plt.title('Xgboost Testing Confusion_matrix with optimized hyper parameters')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 376
        },
        "id": "yS45wRdY01Nc",
        "outputId": "b154f370-2812-4d7e-ca3e-647b189cf226"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "------------------ Confusion Matrix -----------------\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Xgboost Training Confusion_matrix with optimized hyper parameters')"
            ]
          },
          "metadata": {},
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        " #Model Classification Report ----------\n",
        "## get predictions and create model quality report\n",
        "\n",
        "y_train_pred = xgb_clf.predict(X_train)\n",
        "\n",
        "print('\\n------------------ Confusion Matrix -----------------\\n')\n",
        "#print(confusion_matrix(y_test, y_pred))\n",
        "sns.heatmap(confusion_matrix(y_train_pred,y_train),annot=True,fmt=\".1f\",cmap='summer')\n",
        "plt.title('Xgboost Training Confusion_matrix with optimized hyper parameters')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0mixDZcMMR2A",
        "outputId": "7bed3c9d-e502-4e04-88fc-2e6c28c8c0b9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Accuracy Traning: 0.9987\n",
            "Balanced Accuracy Traning: 0.9987\n",
            "\n",
            "\n",
            "Accuracy Testing: 0.9960\n",
            "Balanced Accuracy Testing: 0.9961\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print('\\nAccuracy Traning: {:.4f}'.format(accuracy_score(y_train, y_train_pred)))\n",
        "print('Balanced Accuracy Traning: {:.4f}\\n'.format(balanced_accuracy_score(y_train, y_train_pred)))\n",
        "\n",
        "\n",
        "print('\\nAccuracy Testing: {:.4f}'.format(accuracy_score(y_test, y_pred)))\n",
        "print('Balanced Accuracy Testing: {:.4f}\\n'.format(balanced_accuracy_score(y_test, y_pred)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QPq2gF0WMfJt",
        "outputId": "c30bd3be-9041-4ecf-8082-0551c1ff782b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Micro Precision: 0.9987\n",
            "Micro Recall: 0.9987\n",
            "Micro F1-score: 0.9987\n",
            "\n",
            "Micro Precision: 0.9960\n",
            "Micro Recall: 0.9960\n",
            "Micro F1-score: 0.9960\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print('Micro Precision: {:.4f}'.format(precision_score(y_train, y_train_pred, average='micro')))\n",
        "print('Micro Recall: {:.4f}'.format(recall_score(y_train, y_train_pred, average='micro')))\n",
        "print('Micro F1-score: {:.4f}\\n'.format(f1_score(y_train, y_train_pred, average='micro')))\n",
        "\n",
        "\n",
        "print('Micro Precision: {:.4f}'.format(precision_score(y_test, y_pred, average='micro')))\n",
        "print('Micro Recall: {:.4f}'.format(recall_score(y_test, y_pred, average='micro')))\n",
        "print('Micro F1-score: {:.4f}\\n'.format(f1_score(y_test, y_pred, average='micro')))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Fsk9otkIMp4t",
        "outputId": "f8cfb919-a544-40de-fcb5-8963bae06708"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Macro Precision: 0.9960\n",
            "Macro Recall: 0.9961\n",
            "Macro F1-score: 0.9960\n",
            "\n",
            "Macro Precision: 0.9960\n",
            "Macro Recall: 0.9961\n",
            "Macro F1-score: 0.9960\n",
            "\n"
          ]
        }
      ],
      "source": [
        "print('Macro Precision: {:.4f}'.format(precision_score(y_test, y_pred, average='macro')))\n",
        "print('Macro Recall: {:.4f}'.format(recall_score(y_test, y_pred, average='macro')))\n",
        "print('Macro F1-score: {:.4f}\\n'.format(f1_score(y_test, y_pred, average='macro')))\n",
        "\n",
        "print('Macro Precision: {:.4f}'.format(precision_score(y_test, y_pred, average='macro')))\n",
        "print('Macro Recall: {:.4f}'.format(recall_score(y_test, y_pred, average='macro')))\n",
        "print('Macro F1-score: {:.4f}\\n'.format(f1_score(y_test, y_pred, average='macro')))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F2PV1K4jMp_R",
        "outputId": "dbc3bd9e-9bff-4b4b-f76a-2664d548f9fb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Weighted Precision: 0.9960\n",
            "Weighted Recall: 0.9960\n",
            "Weighted F1-score: 0.9960\n"
          ]
        }
      ],
      "source": [
        "print('Weighted Precision: {:.4f}'.format(precision_score(y_test, y_pred, average='weighted')))\n",
        "print('Weighted Recall: {:.4f}'.format(recall_score(y_test, y_pred, average='weighted')))\n",
        "print('Weighted F1-score: {:.4f}'.format(f1_score(y_test, y_pred, average='weighted')))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NFPvrFc9MqIs",
        "outputId": "b2e2059e-cc1b-4bb1-8e69-b6df86e3704c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--------------- Classification Report ---------------\n",
            "\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "     Arborio       1.00      0.99      0.99      5068\n",
            "     Basmati       1.00      1.00      1.00      5012\n",
            "      Ipsala       1.00      1.00      1.00      4953\n",
            "     Jasmine       1.00      1.00      1.00      5040\n",
            "   Karacadag       0.99      1.00      0.99      4927\n",
            "\n",
            "    accuracy                           1.00     25000\n",
            "   macro avg       1.00      1.00      1.00     25000\n",
            "weighted avg       1.00      1.00      1.00     25000\n",
            "\n",
            "---------------------- XGBoost ----------------------\n"
          ]
        }
      ],
      "source": [
        "print('\\n--------------- Classification Report ---------------\\n')\n",
        "print(classification_report(y_test, y_pred))\n",
        "print('---------------------- XGBoost ----------------------') # unnecessary fancy styling"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "scores['Xgboost'] = {\n",
        "        'Train': accuracy_score(y_train, xgb_clf.predict(X_train)),\n",
        "        'Test': accuracy_score(y_test, xgb_clf.predict(X_test)),\n",
        "    }"
      ],
      "metadata": {
        "id": "zVP-VhLtqd0h"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scores_df = pd.DataFrame(scores)\n",
        "\n",
        "scores_df.plot(kind='bar', figsize=(15, 8))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "id": "WeFUypftz3jT",
        "outputId": "681d2866-2480-4ac2-c802-182471d03cf6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fc0d1263430>"
            ]
          },
          "metadata": {},
          "execution_count": 41
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x576 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xN1CAyCBMfUK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 415
        },
        "outputId": "4100615b-7dce-4ab4-97b4-45f458500763"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "--------------- Classification Report ---------------\n",
            "\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-35-eff9d5452659>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\n--------------- Classification Report ---------------\\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclassification_report\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'---------------------- XGBoost ----------------------'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# unnecessary fancy styling\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36mclassification_report\u001b[0;34m(y_true, y_pred, labels, target_names, sample_weight, digits, output_dict, zero_division)\u001b[0m\n\u001b[1;32m   2108\u001b[0m     \"\"\"\n\u001b[1;32m   2109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2110\u001b[0;31m     \u001b[0my_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2111\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2112\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36m_check_targets\u001b[0;34m(y_true, y_pred)\u001b[0m\n\u001b[1;32m     82\u001b[0m     \u001b[0my_pred\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0marray\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindicator\u001b[0m \u001b[0mmatrix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     83\u001b[0m     \"\"\"\n\u001b[0;32m---> 84\u001b[0;31m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     85\u001b[0m     \u001b[0mtype_true\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype_of_target\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     86\u001b[0m     \u001b[0mtype_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype_of_target\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.8/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_consistent_length\u001b[0;34m(*arrays)\u001b[0m\n\u001b[1;32m    330\u001b[0m     \u001b[0muniques\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    331\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muniques\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 332\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m    333\u001b[0m             \u001b[0;34m\"Found input variables with inconsistent numbers of samples: %r\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    334\u001b[0m             \u001b[0;34m%\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ml\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlengths\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Found input variables with inconsistent numbers of samples: [75000, 25000]"
          ]
        }
      ],
      "source": [
        "print('\\n--------------- Classification Report ---------------\\n')\n",
        "print(classification_report(y_train, y_pred))\n",
        "print('---------------------- XGBoost ----------------------') # unnecessary fancy styling"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}